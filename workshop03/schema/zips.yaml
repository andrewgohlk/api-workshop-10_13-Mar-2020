# Workshop03/04.
# Modified by Andrew Goh, 2020-03-12 - workshop03.
# Modified by Andrew Goh, 2020-03-13 - workshop04.
 
openapi: "3.0.3"
info:
  title: "ZIPs REST API"
  description: "My first API"
  version: "v1.0"

# This is a list of servers.
servers:
  - url: http://localhost:3000
    description: "Development server"

# This is a list of paths/resources & their parameters.
paths:
  # GET /api/states resource path.
  /api/states:
    get:
      description: "Get a list of all the states"
      operationId: getStates
      responses:
        200:
          description: "Default result representation"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string

  # GET /api/state/{stateId} resource path.
  /api/state/{stateId}:
    get:
      description: "Get a list of cities from state Id"
      operationId: getCitiesFromState
      parameters:
      - name: stateId
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/states"
      - name: offset
        in: query
        schema:
          type: integer
          minimum: 0
      - name: limit
        in: query
        schema:
          type: integer
          minimum: 1
          maximum: 20
      responses:
        200:
          description: "Default result representation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/city"

  # GET /api/city/{cityId} resource path.
  /api/city/{cityId}:
    get:
      description: "Get a city by city Id"
      operationId: getCityById
      parameters:
      - name: cityId
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: "Default result representation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/city"

  # GET /api/city/name/{cityName} resource path.
  /api/city/name/{cityName}:
    get:
      description: "Get a city by name"
      operationId: getCityByName
      parameters:
      - name: cityName
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: "Default result representation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/city"

  # GET /api/state/{stateId}/count resource path.
  /api/state/{stateId}/count:
    get:
      description: "Get a count of cities by state Id"
      operationId: getCountOfCitiesByState
      parameters:
      - name: stateId
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: "Default result representation"
          content:
            application/json:
              schema:
                type: object
                properties:
                  state:
                    type: string
                    enum: [ "MA", "RI", "NH", "ME", "VT", "CT", "NY", "NJ", "PA",
                            "DE", "DC", "MD", "VA", "WV", "NC", "SC", "GA", "FL",
                            "AL", "TN", "MS", "KY", "OH", "IN", "MI", "IA", "WI",
                            "MN", "SD", "ND", "MT", "IL", "MO", "KS", "NE", "LA",
                            "AR", "OK", "TX", "CO", "WY", "ID", "UT", "AZ", "NM",
                            "NV", "CA", "HI", "OR", "WA", "AK",
                            "ma", "ri", "nh", "me", "vt", "ct", "ny", "nj", "pa",
                            "de", "dc", "md", "va", "wv", "nc", "sc", "ga", "fl",
                            "al", "tn", "ms", "ky", "oh", "in", "mi", "ia", "wi",
                            "mn", "sd", "nd", "mt", "il", "mo", "ks", "ne", "la",
                            "ar", "ok", "tx", "co", "wy", "id", "ut", "az", "nm",
                            "nv", "ca", "hi", "or", "wa", "ak" ]
                  numOfCities:
                    type: integer
                    description: "Count of cities in state"
                  timestamp:
                    type: string

  # POST /api/city resource path.
  /api/city:
    post:
      tags:
      - city
      summary: "Add a city record"
      operationId: addCity
      requestBody:
        required: true
        # Content-Type
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/city-form"
          application/json:
            schema:
              $ref: "#/components/schemas/city"
      responses:
        201:
          description: "Record created"
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                properties:
                  message:
                    type: string

# Componets/schemas definitions.
components:
  schemas:
    # states schema, used for GET /api/state/{stateId}.
    states:
      type: string
      enum: [ "MA", "RI", "NH", "ME", "VT", "CT", "NY", "NJ", "PA",
              "DE", "DC", "MD", "VA", "WV", "NC", "SC", "GA", "FL",
              "AL", "TN", "MS", "KY", "OH", "IN", "MI", "IA", "WI",
              "MN", "SD", "ND", "MT", "IL", "MO", "KS", "NE", "LA",
              "AR", "OK", "TX", "CO", "WY", "ID", "UT", "AZ", "NM",
              "NV", "CA", "HI", "OR", "WA", "AK",
              "ma", "ri", "nh", "me", "vt", "ct", "ny", "nj", "pa",
              "de", "dc", "md", "va", "wv", "nc", "sc", "ga", "fl",
              "al", "tn", "ms", "ky", "oh", "in", "mi", "ia", "wi",
              "mn", "sd", "nd", "mt", "il", "mo", "ks", "ne", "la",
              "ar", "ok", "tx", "co", "wy", "id", "ut", "az", "nm",
              "nv", "ca", "hi", "or", "wa", "ak" ]

    # city schema, used for GET /api/state/{stateId}, /api/city/{cityId}, /api/city/name/{cityName} responses.
    # Also for POST /api/city JSON schema validation.
    city:
      type: object
      required:
        - city
        - loc
        - pop
        - state
      properties:
        _id:
          type: string
          description: "Id"
        city:
          type: string
          description: "City name"
        loc:
          type: array
          description: "Location of city in [ Lat, Long ]"
          items:
            type: number
          minItems: 2
          maxItems: 2
          example: [ 123.45, 678.90 ]
        pop:
          type: integer
          description: "Population of city"
          minimum: 10
        state:
          type: string
          description: "State Id"
          enum: [ "MA", "RI", "NH", "ME", "VT", "CT", "NY", "NJ", "PA",
                  "DE", "DC", "MD", "VA", "WV", "NC", "SC", "GA", "FL",
                  "AL", "TN", "MS", "KY", "OH", "IN", "MI", "IA", "WI",
                  "MN", "SD", "ND", "MT", "IL", "MO", "KS", "NE", "LA",
                  "AR", "OK", "TX", "CO", "WY", "ID", "UT", "AZ", "NM",
                  "NV", "CA", "HI", "OR", "WA", "AK",
                  "ma", "ri", "nh", "me", "vt", "ct", "ny", "nj", "pa",
                  "de", "dc", "md", "va", "wv", "nc", "sc", "ga", "fl",
                  "al", "tn", "ms", "ky", "oh", "in", "mi", "ia", "wi",
                  "mn", "sd", "nd", "mt", "il", "mo", "ks", "ne", "la",
                  "ar", "ok", "tx", "co", "wy", "id", "ut", "az", "nm",
                  "nv", "ca", "hi", "or", "wa", "ak" ]

    # city-form schema, used for POST /api/city Form validation.
    city-form:
      type: object
      required:
        - city
        - lat
        - lng
        - pop
        - state
      properties:
        city:
          type: string
          description: "City name"
        lat:
          type: number
          description: "City's latitude"
        lng:
          type: number
          description: "City's longitude"
        pop:
          type: integer
          description: "Population of city"
          minimum: 10
        state:
          type: string
          description: "State Id"
          # Some using Talend API Tester, need to use both Full CAPS & lower caps.
          enum: [ "MA", "RI", "NH", "ME", "VT", "CT", "NY", "NJ", "PA",
                  "DE", "DC", "MD", "VA", "WV", "NC", "SC", "GA", "FL",
                  "AL", "TN", "MS", "KY", "OH", "IN", "MI", "IA", "WI",
                  "MN", "SD", "ND", "MT", "IL", "MO", "KS", "NE", "LA",
                  "AR", "OK", "TX", "CO", "WY", "ID", "UT", "AZ", "NM",
                  "NV", "CA", "HI", "OR", "WA", "AK",
                  "ma", "ri", "nh", "me", "vt", "ct", "ny", "nj", "pa",
                  "de", "dc", "md", "va", "wv", "nc", "sc", "ga", "fl",
                  "al", "tn", "ms", "ky", "oh", "in", "mi", "ia", "wi",
                  "mn", "sd", "nd", "mt", "il", "mo", "ks", "ne", "la",
                  "ar", "ok", "tx", "co", "wy", "id", "ut", "az", "nm",
                  "nv", "ca", "hi", "or", "wa", "ak" ]
